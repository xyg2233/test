name: Sync from Gitee with Smart Backup (Beijing Time)
on:
  schedule:
    - cron: '0 16-23,0-7 * * *'  # UTC时间16-23点和0-7点 → 北京时间0-23点整点
  workflow_dispatch:             # 支持手动触发

env:
  TZ: Asia/Shanghai              # 全局时区设置（影响所有步骤）

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      # ====================== 时区验证 ======================
      - name: Verify Beijing Time
        run: |
          echo "UTC时间: $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "北京时间: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "时区配置: $(timedatectl show --value -p Timezone || echo '系统默认时区')"

      # ====================== 核心同步流程 ======================
      - name: Checkout GitHub Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize Environment
        run: |
          mkdir -p 历史线路包
          touch 历史线路包/last_hashes.txt
          chmod 644 历史线路包/last_hashes.txt
          echo "初始化完成 [$(date '+%m-%d %H:%M:%S')]"

      - name: Backup Workflow File
        run: cp .github/workflows/sync.yml /tmp/sync.yml

      - name: Protect Backup Directory
        run: |
          if [ -d "历史线路包" ]; then
            mv 历史线路包 /tmp/history_backup
            echo "备份目录已保护 [$(date '+%H:%M:%S')]"
          fi

      - name: Fetch and Overwrite from Gitee
        run: |
          git remote add gitee https://gitee.com/xygg23333/test.git || true
          git fetch gitee
          git reset --hard gitee/master
          git clean -fd
          echo "同步完成 [$(date '+%H:%M:%S')]"

      # ====================== 备份恢复 ======================
      - name: Restore Backup Directory
        run: |
          if [ -d "/tmp/history_backup" ]; then
            mv /tmp/history_backup 历史线路包
            chmod 644 历史线路包/last_hashes.txt
            echo "备份已恢复 [$(date '+%H:%M:%S')]"
          fi

      - name: Restore Workflow File
        run: |
          mkdir -p .github/workflows
          cp /tmp/sync.yml .github/workflows/sync.yml
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add .github/workflows/sync.yml
          git commit -m "恢复工作流文件 [$(date '+%m-%d %H:%M')]" || echo "无变更可提交"

      # ====================== 智能备份 ======================
      - name: Smart Atomic Backup
        id: backup
        run: |
          #!/bin/bash
          set -eo pipefail
          
          # 强制使用北京时间
          export TZ=Asia/Shanghai
          echo "备份开始 [$(date '+%H:%M:%S')]"

          # 配置参数
          SRC_FILE="单线路.zip"
          BACKUP_DIR="历史线路包"
          BASE_NAME="单线路"
          DATE_SUFFIX=$(date +"%y.%m.%d")  # 自动使用时区

          # 原子备份函数
          atomic_backup() {
            # 获取文件锁（防止并发）
            exec 9>"$BACKUP_DIR/.lock"
            flock -x -w 10 9 || { echo "::error::获取锁超时"; return 1; }

            # 检查源文件
            [ -f "$SRC_FILE" ] || { echo "::warning::源文件不存在"; return 0; }

            # 计算哈希
            CURRENT_HASH=$(sha256sum "$SRC_FILE" | awk '{print $1}')
            echo "文件哈希: ${CURRENT_HASH:0:8}..."

            # 检查重复备份
            if [ -f "$BACKUP_DIR/last_hashes.txt" ]; then
              OLD_HASH=$(grep "^$BASE_NAME:" "$BACKUP_DIR/last_hashes.txt" | cut -d: -f2 || echo "")
              [ "$CURRENT_HASH" == "$OLD_HASH" ] && { echo "::notice::无变化"; return 0; }
            fi

            # 生成版本号
            VERSION=$(ls -v "$BACKUP_DIR/${BASE_NAME}${DATE_SUFFIX}"*.zip 2>/dev/null | tail -n1 | 
                      grep -oP "(?<=\.)\d+(?=\.zip)" | awk '{print $1+1}' || echo "0")
            
            # 创建备份
            BACKUP_NAME="${BASE_NAME}${DATE_SUFFIX}$([ "$VERSION" -gt 0 ] && echo ".$VERSION").zip"
            TEMP_FILE=$(mktemp)
            cp "$SRC_FILE" "$TEMP_FILE" && mv "$TEMP_FILE" "$BACKUP_DIR/$BACKUP_NAME" || {
              echo "::error::备份失败"; return 1
            }

            # 更新哈希记录
            TEMP_HASH=$(mktemp)
            grep -v "^$BASE_NAME:" "$BACKUP_DIR/last_hashes.txt" 2>/dev/null > "$TEMP_HASH" || true
            echo "$BASE_NAME:$CURRENT_HASH" >> "$TEMP_HASH"
            mv "$TEMP_HASH" "$BACKUP_DIR/last_hashes.txt"

            echo "::notice::备份成功: $BACKUP_NAME"
            return 0
          }

          atomic_backup || exit 1

      # ====================== 后续处理 ======================
      - name: Verify Backup
        run: |
          echo "=== 验证报告 [$(date '+%H:%M:%S')] ==="
          echo "备份文件:"
          ls -l 历史线路包/ || echo "无备份"
          echo "哈希记录:"
          cat 历史线路包/last_hashes.txt || echo "无记录"

      - name: Auto Extract ZIP
        run: |
          if [ -f "单线路.zip" ]; then
            echo "解压中 [$(date '+%H:%M:%S')]..."
            mkdir -p 单线路文件/
            unzip -o 单线路.zip -d 单线路文件/ && echo "解压完成" || {
              echo "::error::解压失败"; exit 1
            }
          fi

      - name: Commit Changes
        run: |
          git add 历史线路包/ 单线路文件/ || echo "无需添加"
          if ! git diff-index --quiet HEAD --; then
            git commit -m "自动备份 [$(date '+%m-%d %H:%M')] [skip ci]" || exit 1
            echo "变更已提交"
          else
            echo "::notice::无新变更"
          fi

      - name: Push to GitHub
        run: git push --force origin HEAD:master

      - name: Cleanup
        run: rm -rf /tmp/{sync.yml,history_backup}
